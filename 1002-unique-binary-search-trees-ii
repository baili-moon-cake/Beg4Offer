/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<TreeNode*> generateTrees(int n) {
        vector<TreeNode*> res;
        if(n<1) return res;
        return helper(1,n);
    }

    vector<TreeNode*> helper(int start, int end){
        vector<TreeNode*> res;
        if(start>end){
            TreeNode* temp = nullptr;
            res.push_back(temp);
            return res;
        }
        if(start==end){
            TreeNode* temp = new TreeNode(start);
            res.push_back(temp);
            return res;
        }
        for(int i = start; i <= end; i++){
            vector<TreeNode*> left_res = helper(start, i-1);
            vector<TreeNode*> right_res = helper(i+1, end);
            for(auto & left:left_res){
                for(auto & right:right_res){
                    TreeNode* temp = new TreeNode(i);
                    temp->left = left;
                    temp->right = right;
                    res.push_back(temp);
                }
            }
        }
        return res;

    }
};

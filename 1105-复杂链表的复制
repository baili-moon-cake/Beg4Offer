/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* next;
    Node* random;
    
    Node(int _val) {
        val = _val;
        next = NULL;
        random = NULL;
    }
};
*/
class Solution {
public:
    Node* copyRandomList(Node* head) {
        if(!head) return nullptr;
        //复制
        Node* p = head;
        while(p){
            Node* temp = new Node(p->val);
            temp->next = p->next;
            p->next=temp;
            p=p->next->next;
        }
        //random链接
        p=head;
        while(p){
            if(p->random) p->next->random=p->random->next;
            p=p->next->next;
        }
        //分离
        Node* res = head->next;
        Node* p1=head;
        Node* p2=res;
        while(p1 && p2){
            p1->next=p2->next;
            if(p2->next) p2->next=p2->next->next;
            p1=p1->next;
            p2=p2->next;
        }
        return res;
    }
};

    Node* copyRandomList(Node* head) {
        if(!head) return NULL;
        unordered_map<Node*, Node*> map;
        Node* p = head;
        while(p){
            map[p] = new Node(p->val);
            p=p->next;
        }
        p=head;
        while(p){
            map[p]->next=map[p->next];
            map[p]->random=map[p->random];
            p=p->next;
        }
        return map[head];
        
    }

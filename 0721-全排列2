class Solution {
public:
    vector<vector<int>> permuteUnique(vector<int>& nums) {
        vector<vector<int>> res;
        if(nums.empty()) return res;
        sort(nums.begin(), nums.end());
        vector<int> track;
        vector<bool> visited(nums.size(), false);
        helper(res, nums, track, visited);
        return res;
    }
    void helper(vector<vector<int>>& res, vector<int>& nums, vector<int>& track, vector<bool>& visited){
        if(track.size()==nums.size()){
            res.push_back(track);
            return;
        }
        for(int i=0;i<nums.size();i++){
            if(visited[i]) continue;
            //如果这个数和之前的数一样，并且之前的数还未使用过（说明已经回溯过）
            //因为正常来说，前面的应该被使用过了，如果没有，说明回溯过了
            if(i>0 && !visited[i-1] && nums[i-1]==nums[i]) continue; 

            visited[i]=true;
            track.push_back(nums[i]);
            helper(res, nums, track, visited);
            track.pop_back();
            visited[i]=false;
        }
    }

};

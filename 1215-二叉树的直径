/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
/*
1. 二叉树的直径不一定过根节点，因此需要去搜一遍所有节点为根节点时对应的直径，取最大值。
2. root的直径 = root左子树高度 + root右子树高度
*/
class Solution {
public:
    int res = 0;
    int diameterOfBinaryTree(TreeNode* root) {
        int h = depth(root);
        return res;
    }
    //先写好递归函数，遍历每一个节点
    int depth(TreeNode* root){ //以root为起点的最大(一条)链路长度
        //要递归，所以定义好边界
        if(!root) return 0;
        int left_depth = root->left? depth(root->left)+1 : 0; //注意，+1才表示包含了从root出发的指针
        int right_depth = root->right? depth(root->right)+1 : 0; //要判断是否为null，此时root没有指针伸出来，直接为0
        res = max(res, left_depth+right_depth); //最后填写这个就行，当前经过root的直径
        return max(left_depth, right_depth);
    }
};

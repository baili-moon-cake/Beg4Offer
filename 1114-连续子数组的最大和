class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        if(nums.empty()) return 0;
        vector<int> dp(nums.size(), 0); //以下标为i结尾的最大数组和
        dp[0]=nums[0];
        for(int i=1;i<nums.size();i++){
            if(dp[i-1]<=0){
                dp[i]=nums[i]; //之前的没有贡献
            }
            else{
                dp[i]=dp[i-1]+nums[i];//强行加上
            }
        }
        return *max_element(dp.begin(), dp.end());
    }
};

精简版

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        if(nums.empty()) return 0;
        //vector<int> dp(nums.size(), 0); //以下标为i结尾的最大数组和
        int dp=0;
        int res=INT_MIN;
        for(int i=0;i<nums.size();i++){
            dp=max(dp+nums[i], nums[i]);
            res=max(res,dp);
        }
        return res;
    }
};

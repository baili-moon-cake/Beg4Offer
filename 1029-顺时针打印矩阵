class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        vector<int> res;
        if(matrix.empty()) return res;
        int t=0, b=matrix.size()-1, l=0, r=matrix[0].size()-1; //上下左右边缘
        while(true){
            for(int i=l; i<=r; i++) res.push_back(matrix[t][i]);
            if(++t > b) break; //超出边界
            for(int i=t; i<=b; i++) res.push_back(matrix[i][r]);
            if(--r < l) break;
            for(int i=r; i>=l; i--) res.push_back(matrix[b][i]);
            if(--b < t) break;
            for(int i=b; i>=t; i--) res.push_back(matrix[i][l]);
            if(++l > r) break;
        }
        return res;
    }
};

//变形题，生成这样1-n^2的矩阵，还是遍历
class Solution {
public:
    vector<vector<int>> generateMatrix(int n) {
        vector<vector<int>> matrix(n, vector<int>(n,0));
        int num=1;
        int t=0, b=matrix.size()-1, l=0, r=matrix[0].size()-1; //上下左右边缘
        while(true){
            for(int i=l; i<=r; i++) matrix[t][i]=num++;
            if(++t > b) break; //超出边界
            for(int i=t; i<=b; i++) matrix[i][r]=num++;
            if(--r < l) break;
            for(int i=r; i>=l; i--) matrix[b][i]=num++;
            if(--b < t) break;
            for(int i=b; i>=t; i--) matrix[i][l]=num++;
            if(++l > r) break;
        }
        return matrix;
    }
};

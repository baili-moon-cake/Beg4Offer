/*状态定义：dp[i][j]表示从数组的 [0, i] 这个子区间内挑选一些正整数，每个数只能用一次，使得这些数的和恰好等于 j。*/
class Solution {
public:
    bool canPartition(vector<int>& nums) {
        int len = nums.size();
        // 题目已经说非空数组，可以不做非空判断
        int sum = 0;
        for (int num : nums) sum += num;
        // 特判：如果是奇数，就不符合要求
        if ((sum % 2) == 1) return false;

        int target = sum / 2;
        // 创建二维状态数组，行：物品索引，列：容量（包括 0）
        vector<vector<bool>> dp(len, vector<bool>(target+1, false));

        // 先填表格第 0 行，第 1 个数只能让容积为它自己的背包恰好装满
        if (nums[0] <= target) dp[0][nums[0]] = true;

        // 再填表格后面几行
        for (int i = 1; i < len; i++) {
            for (int j = 0; j <= target; j++) {
                if (nums[i] == j) {
                    dp[i][j] = true;
                    continue;
                }
                if (nums[i] < j) {
                    dp[i][j] = dp[i - 1][j] || dp[i - 1][j - nums[i]];
                }
                //nums[i] > j 直接跳过了，不可能有解
            }
        }
        return dp[len - 1][target];
    }
};

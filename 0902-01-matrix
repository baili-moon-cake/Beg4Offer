class Solution {
public:
    vector<vector<int>> updateMatrix(vector<vector<int>>& matrix) {
        int m = matrix.size(), n = matrix[0].size();
        vector<vector<int>> dist(m, vector<int>(n));
        vector<vector<int>> seen(m, vector<int>(n));
        queue<pair<int, int>> q;
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(matrix[i][j]==0){
                    pair<int, int> p(i,j);
                    q.push(p);
                    seen[i][j] = 1;
                }
            }
        }
        while(!q.empty()){
            auto p = q.front();
            int i = p.first, j = p.second;
            q.pop();
            int ni = i - 1;
            int nj = j;
            if(ni >= 0 && ni < m && nj>=0 && nj < n && !seen[ni][nj]){
                dist[ni][nj] = dist[i][j] + 1;
                seen[ni][nj] = 1;
                pair<int, int> p(ni,nj);
                q.push(p);
            }
            ni = i + 1;
            nj = j;
            if(ni>=0 && ni < m && nj>=0 && nj < n && !seen[ni][nj]){
                dist[ni][nj] = dist[i][j] + 1;
                seen[ni][nj] = 1;
                pair<int, int> p(ni,nj);
                q.push(p);
            }
            ni = i;
            nj = j-1;
            if(ni>=0 && ni < m && nj>=0 && nj < n && !seen[ni][nj]){
                dist[ni][nj] = dist[i][j] + 1;
                seen[ni][nj] = 1;
                pair<int, int> p(ni,nj);
                q.push(p);
            }
            ni = i;
            nj = j+1;
            if(ni>=0 && ni < m && nj>=0 && nj < n && !seen[ni][nj]){
                dist[ni][nj] = dist[i][j] + 1;
                seen[ni][nj] = 1;
                pair<int, int> p(ni,nj);
                q.push(p);
            }

        }
        return dist;
    }
};

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseKGroup(ListNode* head, int k) {
        if(!head) return nullptr;

        ListNode* cur = head;        
        int length = 0;
        while(cur){
            length++;
            cur=cur->next;
        }

        for(int i=0; i<length/k; i++){ //第i组
            head = reverseBetween(head, i*k+1, (i+1)*k);
        }
        return head;
    }

    ListNode* reverseBetween(ListNode* head, int m, int n) {
        ListNode* dummy = new ListNode(0);
        dummy->next=head;
        ListNode* pre = dummy;
        ListNode* cur = head;
        for(int i=1; i<m; i++){
            pre=pre->next;
        }
        cur=pre->next;
        for(int i=m; i<n; i++){
            ListNode* nex=cur->next; //把这个nex移到前面去
            cur->next = nex->next;
            nex->next=pre->next;
            pre->next=nex; //pre永远保持不变
        }
        return dummy->next;
    }
};

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

 /*
 一个树是另一个树的子树 则
要么这两个树相等
要么这个树是左树的子树
要么这个树hi右树的子树
 */
class Solution {
public:
    bool isSubtree(TreeNode* s, TreeNode* t) {
        if (!s && !t) return true;
        if (s && !t) return false;
        if (!s && t) return false;
        return isSametree(s, t) || isSubtree(s->left, t) || isSubtree(s->right, t);
    }
    bool isSametree(TreeNode* s, TreeNode* t)
    {
        if (!s && !t) return true;
        return  s && t
                && s->val == t->val 
                && isSametree(s->left, t->left) 
                && isSametree(s->right, t->right);
    }
};

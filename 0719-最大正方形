//min(上, 左, 左上) + 1
//其实就是木桶理论，受限于最短的
class Solution {
public:
    int maximalSquare(vector<vector<char>>& matrix) {
        if(matrix.empty()) return 0;
        int m=matrix.size(), n=matrix[0].size();
        //dp[i][j]表示以i,j位置结尾的正方形的最大边长
        vector<vector<int>> dp(m, vector<int>(n, 0));
        int max_side=0;
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(matrix[i][j]=='0') continue;
                if(i==0 || j==0) dp[i][j]=1;
                else dp[i][j]=min(min(dp[i-1][j-1],dp[i][j-1]),dp[i-1][j])+1;
                max_side=max(max_side, dp[i][j]);
            }
        }
        return max_side*max_side;
    }
};

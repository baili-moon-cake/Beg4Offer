class Solution {
public:
    int search(vector<int>& nums, int target) {
        int len = nums.size();
        if(len == 0) return 0;
        int left = 0, right = len - 1;
        int boundaryLeft, boundaryRight;    //target的左右边界，不包含target

        //第一次二分法求出右边界：boundaryRight
        while(left <= right) { //left=right时，left又右移了一次使得left成为右边界，case:[1],1
            int mid = left + (right - left) / 2;
            if(nums[mid] <= target)
                left = mid + 1;
            else
                right = mid - 1;
        }
        if(right >= 0 && nums[right] != target) return 0; //保证left+1偏1位，左边right刚好是target
        boundaryRight = left;

        //第而二次二分法求出左边界：boundaryLeft
        right = left-1, left = 0;
        while(left <= right) {
            int mid = left + (right - left) / 2;
            if(nums[mid] < target)
                left = mid + 1;
            else
                right = mid - 1;
        }
        boundaryLeft = right;
        
        return boundaryRight-boundaryLeft-1;
    }
};

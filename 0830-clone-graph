/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

class Solution {
public:
    Node* cloneGraph(Node* node) {
        if(!node) return node;
        unordered_map<Node*, Node*> visited;
        queue<Node*> q;
        q.push(node);
        visited[node] = new Node(node->val);
        while(!q.empty()){
            auto temp = q.front();
            q.pop();
            for (auto nei : temp->neighbors){
                if(visited.find(nei) == visited.end()) { // 没找到
                    visited[nei] = new Node(nei->val);
                    q.push(nei);
                }
                visited[temp]->neighbors.push_back(visited[nei]);
            }
        }
        return visited[node];
        
    }
};

class Solution {
public:
    bool exist(vector<vector<char>>& board, string word) {
        bool res = false;
        for(int i=0; i<board.size(); i++){
            for(int j=0; j<board[0].size(); j++){
                res = helper(board, word, i, j, 0);
                if(res) return res;
            }
        }
        return res;
    }
    bool helper(vector<vector<char>>& board, string& word, int i, int j, int index){
        //边界的判断，如果越界直接返回false。index表示的是查找到字符串word的第几个字符，
        //如果这个字符不等于board[i][j]，说明验证这个坐标路径是走不通的，直接返回false
        if(i<0 || i>=board.size() || j<0 || j>=board[0].size() || board[i][j]!=word[index]) return false;
        if(index == word.size()-1) return true; //最后一个字符了
        char temp = board[i][j];
        board[i][j] = '.'; //堵死这条路
        bool res = helper(board, word, i+1,j,index+1) || helper(board, word, i-1,j,index+1) || helper(board, word, i,j+1,index+1) || helper(board, word, i,j-1,index+1);
        board[i][j] = temp;
        return res;
    }
};

class Solution {
public:
    vector<int> nextGreaterElement(vector<int>& nums1, vector<int>& nums2) {
        vector<int> res(nums2.size(), 0); //下一个最大元素
        unordered_map<int, int> m;
        stack<int> s;
        for(int i=nums2.size()-1; i>=0; i--){
            while(!s.empty() && s.top()<=nums2[i]){
                s.pop();
            }
            res[i] = s.empty()?-1:s.top();
            m[nums2[i]]=res[i]; //放进去
            s.push(nums2[i]);
        }
        vector<int> r(nums1.size(), 0);
        for(int i=0; i<nums1.size(); i++){
            r[i]=m[nums1[i]];
        }
        return r;
    }
};


//循环版
class Solution {
public:
    vector<int> nextGreaterElements(vector<int>& nums) {
        int n=nums.size();
        vector<int> res(n, 0); //下一个最大元素
        stack<int> s;
        for(int i=2*n-1; i>=0; i--){
            while(!s.empty() && s.top()<=nums[i%n]){
                s.pop();
            }
            res[i%n] = s.empty()?-1:s.top();
            s.push(nums[i%n]);
        }
        return res;
    }
};
